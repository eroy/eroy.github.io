#!/bin/bash
source ./configurate.cfg
clear;
echo -e "Script for managment router TP-link by Sergey Zhuravel\n"

IP=${1};
PASSWORD=${2};

NEW_PASS=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)

MAX_TRIES=3; # maximum number of reboot attempts


# URL for managment
# URL for managment
REBOOT_URL="http://"${IP}"/userRpm/SysRebootRpm.htm?Reboot=Reboot";
REBOOT_REFERER_URL="http://"${IP}"/userRpm/SysRebootRpm.htm";

CONF_VPN_REFERER_URL="http://"${IP}"/userRpm/PPTPCfgRpm.htm";

REMOUTE_ACCESS_REFERER_URL="http://"${IP}"/userRpm/ManageControlRpm.htm";

WPS="http://"${IP}"/userRpm/WpsCfgRpm.htm?DisWps=DisWps";
WPS_REFERER="http://"${IP}"/userRpm/WpsCfgRpm.htm";

WIFI_SSID_REFERER_URL="http://"${IP}"/userRpm/WlanNetworkRpm.htm";

CHANGE_WIFI_PASS_REFERER_URL="http://"${IP}"/userRpm/WlanSecurityRpm.htm";

DHCP_REFERER_URL="http://"${IP}"/userRpm/LanDhcpServerRpm.htm";

LAN_REFERER_URL="http://"${IP}"/userRpm/NetworkCfgRpm.htm";


change_wifi()
{
# If the reboot sequence fails, try again $MAX_TRIES times
for i in $(seq 1 ${MAX_TRIES})
do
  CHANGE_WIFI_PASS_URL="http://"${IP}"/userRpm/WlanSecurityRpm.htm?wepSecOpt=3&keytype=1&keynum=1&key1=&length1=0&key2=&length2=0&key3=&length3=0&key4=&length4=0&wpaSecOpt=3&wpaCipher=1&radiusIp=&radiusPort=1812&radiusSecret=&intervalWpa=0&secType=3&pskSecOpt=3&pskCipher=1&pskSecret="${NEW_PASS}"&interval=0&Save=Save";

  
  # REBOOT_RESPONSE=`curl -s --user ${user}:${PASSWORD} --referer ${REBOOT_REFERER_URL} ${REBOOT_URL}`;
  WIFI_RESPONSE=`curl -s --user ${user}:${PASSWORD} --referer ${CHANGE_WIFI_PASS_REFERER_URL} ${CHANGE_WIFI_PASS_URL}`;
  sleep 1;
  WPS_RESPONSE=`curl -s --user ${user}:${PASSWORD} --referer ${WPS_REFERER} ${WPS}`;
  sleep 1;
  SSID_RESPONSE=`curl -s --user ${user}:${PASSWORD} --referer ${SSID} ${SSID}`;




  MATCHESS=`echo ${WIFI_RESPONSE} | grep -c "WlanSecurityRpm"`
  if [ ${MATCHESS} -gt 0 ]; then

    SSID_TEXT=`echo ${SSID_RESPONSE} | awk {'print $9'} | awk -F"," '{ print $4 }' | sed 's/\"//g'`  
    SUCCESS_TEXT="Successfully edit pass to \e[1m\e[31m$NEW_PASS\e[0m";
    WPS=`echo ${WPS_RESPONSE} | awk {'print $9'} | awk -F"," '{ print $1 }'`
    echo "WPS: "${WPS};
    echo "SSID: "${SSID_TEXT}
    echo -e ${SUCCESS_TEXT};


    REBOOT_RESPONSE=`curl -s --user ${user}:${PASSWORD} --referer ${REBOOT_REFERER_URL} ${REBOOT_URL}`;
    # Success!
    MATCHES=`echo ${REBOOT_RESPONSE} | grep -c "Reboot"`
    if [ ${MATCHES} -gt 0 ]; then
      SUCCESS_TEXT="Successfully triggered reboot of ${IP}";
      echo ${SUCCESS_TEXT};
    # Success!
    break
  else
    echo "Failed on try $i..."
    sleep 1;
  fi


  break
else
  echo "Error $i..."
  sleep 1;
fi

done

}

change_wifi_manual()
{


# If the reboot sequence fails, try again $MAX_TRIES times
for i in $(seq 1 ${MAX_TRIES})
do

  printf 'Enter new passsword on wifi: '
  read -s PASS_MANUAL

PASS_MANUAL_LENGTH=`echo -n "${PASS_MANUAL}" | wc -c`

  if [ ${PASS_MANUAL_LENGTH} -gt 7 ]; then
    echo "PASS OK"
  else
    echo "Error input password"
    exit 1;

  fi


  CHANGE_WIFI_PASS_MANUAL_URL="http://"${IP}"/userRpm/WlanSecurityRpm.htm?wepSecOpt=3&keytype=1&keynum=1&key1=&length1=0&key2=&length2=0&key3=&length3=0&key4=&length4=0&wpaSecOpt=3&wpaCipher=1&radiusIp=&radiusPort=1812&radiusSecret=&intervalWpa=0&secType=3&pskSecOpt=3&pskCipher=1&pskSecret="${PASS_MANUAL}"&interval=0&Save=Save";

  
  # REBOOT_RESPONSE=`curl -s --user ${user}:${PASSWORD} --referer ${REBOOT_REFERER_URL} ${REBOOT_URL}`;
  WIFI_RESPONSE=`curl -s --user ${user}:${PASSWORD} --referer ${CHANGE_WIFI_PASS_REFERER_URL} ${CHANGE_WIFI_PASS_MANUAL_URL}`;
  sleep 1;
  WPS_RESPONSE=`curl -s --user ${user}:${PASSWORD} --referer ${WPS_REFERER} ${WPS}`;
  sleep 1;
  SSID_RESPONSE=`curl -s --user ${user}:${PASSWORD} --referer ${SSID} ${SSID}`;




  MATCHESS=`echo ${WIFI_RESPONSE} | grep -c "WlanSecurityRpm"`
  if [ ${MATCHESS} -gt 0 ]; then

    SSID_TEXT=`echo ${SSID_RESPONSE} | awk {'print $9'} | awk -F"," '{ print $4 }' | sed 's/\"//g'`  
    SUCCESS_TEXT="Successfully edit pass to \e[1m\e[31m$PASS_MANUAL\e[0m";
    WPS=`echo ${WPS_RESPONSE} | awk {'print $9'} | awk -F"," '{ print $1 }'`
    echo "WPS: "${WPS};
    echo "SSID: "${SSID_TEXT}
    echo -e ${SUCCESS_TEXT};


    REBOOT_RESPONSE=`curl -s --user ${user}:${PASSWORD} --referer ${REBOOT_REFERER_URL} ${REBOOT_URL}`;
    # Success!
    MATCHES=`echo ${REBOOT_RESPONSE} | grep -c "Reboot"`
    if [ $MATCHES -gt 0 ]; then
      SUCCESS_TEXT="Successfully triggered reboot of ${IP}";
      echo ${SUCCESS_TEXT};
    # Success!
    break
  else
    echo "Failed on try $i..."
    sleep 1;
  fi


  break
else
  echo "Error $i..."
  sleep 1;
fi

done


}


reboot_router() 
{
  for i in $(seq 1 ${MAX_TRIES})
  do

    REBOOT_RESPONSE=`curl -s --user ${user}:${PASSWORD} --referer ${REBOOT_REFERER_URL} ${REBOOT_URL}`;
    MATCHES=`echo ${REBOOT_RESPONSE} | grep -c "Reboot"`
    if [ ${MATCHES} -gt 0 ]; then
      SUCCESS_TEXT="Successfully triggered reboot of ${IP}";
      echo ${SUCCESS_TEXT};
    # Success!
    break
  else
    echo "Failed on try $i..."
    sleep 1;
  fi

done
}

inf_test() {

INFO_WPS_RESPONSE=`curl -s --user ${user}:${PASSWORD} --referer ${WPS_REFERER} ${WPS_REFERER}`;

 
}

info_router()
{

INFO_VERSION_REFERER_URL="http://"${IP}"/userRpm/StatusRpm.htm";
INFO_VERSION_RESPONSE=`curl -s --user ${user}:${PASSWORD} --referer ${INFO_VERSION_REFERER_URL} ${INFO_VERSION_REFERER_URL}`;

INFO_WIFI_RESPONSE=`curl -s --user ${user}:${PASSWORD} --referer ${WIFI_SSID_REFERER_URL} ${WIFI_SSID_REFERER_URL}`;
INFO_WIFI1_RESPONSE=`curl -s --user ${user}:${PASSWORD} --referer ${CHANGE_WIFI_PASS_REFERER_URL} ${CHANGE_WIFI_PASS_REFERER_URL}`;

INFO_REMOUTE_RESPONSE=`curl -s --user ${user}:${PASSWORD} --referer ${REMOUTE_ACCESS_REFERER_URL} ${REMOUTE_ACCESS_REFERER_URL}`;

INFO_WPS_RESPONSE=`curl -s --user ${user}:${PASSWORD} --referer ${WPS_REFERER} ${WPS_REFERER}`;
INFO_WPS=`echo "${INFO_WPS_RESPONSE}" | grep "wpsInf" -A 1 | awk -F "," {'print $1'} | head -n 2 | grep '[0-1]'`

INFO_WAN_RESPONSE=`curl -s --user ${user}:${PASSWORD} --referer ${CONF_VPN_REFERER_URL} ${CONF_VPN_REFERER_URL}`;

WAN_TYPE=`echo ${INFO_VERSION_RESPONSE} | awk -F "wanPara" {'print $2'} | awk -F "," {'print $4'}`

echo -e "\nVesion info:"
echo -e "Version:" `echo ${INFO_VERSION_RESPONSE} | awk {'print $19 , $20'} | sed 's/\"//g'`
echo -e "Mac:" `echo "${INFO_VERSION_RESPONSE}"  | grep "wanPara" -A 1 | awk -F "," {'print $2'} | grep '[a-zA-Z0-9]' | sed 's/\"//g'  | sed 's/^[ \t]*//'`
echo "- - - - -"
echo -e "\nWifi info"
echo "- - - - -"
echo -e "SSID: "`echo "${INFO_WIFI_RESPONSE}" | head -n 3 | awk {'print $1'} | awk -F "," {'print $4'} | sed 's/\"//g' | tail -n 1`
echo -e "WIFI PASS: "`echo "${INFO_WIFI1_RESPONSE}" | grep "wlanPara" -A 1 | awk -F "," {'print $10'} | grep '[a-zA-Z0-9]' | sed 's/\"//g'`
if (( ${INFO_WPS} == 0 )); then
    #statements
    echo "WPS STATUS: off"
  else
    echo "WPS STATUS: on"
fi
echo "- - - - -"
echo -e "\nRemoute access: "`echo ${INFO_REMOUTE_RESPONSE} | awk {'print $10'} | awk -F "," {'print $1'} | sed 's/\"//g'`
echo "- - - - -"

if (( ${WAN_TYPE} == 8 )); then

echo -e "\nVPN info"
echo "- - - - -"
echo -e "username: "`echo ${INFO_WAN_RESPONSE} | awk -F "," {'print $6'} | sed 's/\"//g'`
echo -e "passsword: "`echo ${INFO_WAN_RESPONSE} | awk -F "," {'print $7'} | sed 's/\"//g'`
echo -e "vpn_server: "`echo ${INFO_WAN_RESPONSE} | awk -F "," {'print $5'} | sed 's/\"//g'`
echo -e "\r"
echo -e "dhpc IP: "`echo ${INFO_WAN_RESPONSE} | awk -F "," {'print $10'} | sed 's/\"//g'`
echo -e "dhpc Mask: "`echo ${INFO_WAN_RESPONSE} | awk -F "," {'print $11'} | sed 's/\"//g'`
echo -e "dhpc Gateway: "`echo ${INFO_WAN_RESPONSE} | awk -F "," {'print $12'} | sed 's/\"//g'`
echo -e "\r"
echo -e "Intenet IP: "`echo ${INFO_WAN_RESPONSE} | awk -F "," {'print $18'} | sed 's/\"//g'`
echo -e "DNS1: "`echo ${INFO_WAN_RESPONSE} | awk -F "," {'print $22'} | sed 's/\"//g'`
echo -e "DNS2: "`echo ${INFO_WAN_RESPONSE} | awk -F "," {'print $23'} | sed 's/\"//g'`
  
fi
}



echo -e "\nChange config mode: 
  1 - for generate new wifi passsword
  2 - enter new passsword wifi
  i - info router
  0 - reboot router
  q - exit \n"
printf 'What do you want to do? '
read WANT

case "${WANT}" in
  1)
change_wifi
;;

2)
change_wifi_manual
;;

3)
reboot_router
;;

q)
exit;
;;

i)
info_router
;;
a)
inf_test
;;

*) 
echo "Error code"
exit;
;;
esac 