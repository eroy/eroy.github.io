#!/bin/bash
source ./const.cfg
source ./configurate.cfg 

clear;
echo -e "Script for managment router TP-link by Sergey Zhuravel\n"



IP=$1;
PASSWORD=$2;


PASSWORD_MD5=`echo -n ${PASSWORD} | md5sum | cut -d " " -f 1`;
COOKIE_B64_PART=`echo -n ${user}":"$(echo -n ${PASSWORD_MD5})|base64`;
COOKIEVAL_UNENCODED=`echo -n "Basic ${COOKIE_B64_PART}"`;
COOKIEVAL=`rawurlencode "${COOKIEVAL_UNENCODED}"`

GET_KEY_URL=`echo "http://${IP}/userRpm/LoginRpm.htm?Save=Save"`
RESPONSE=`curl -s --cookie "Authorization=${COOKIEVAL}" ${GET_KEY_URL}`;
KEY=`echo $RESPONSE |  head -n 1 | cut -d '/' -f 4` # extract key from post-login-page

# user and password to router


# generate new passsword
NEW_PASS=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)

# maximum number of reboot attempts
MAX_TRIES=3; 


# URL for managment
REBOOT_URL="http://"${IP}"/"${KEY}"/userRpm/SysRebootRpm.htm?Reboot=Reboot";
REBOOT_REFERER_URL="http://"${IP}"/"${KEY}"/userRpm/SysRebootRpm.htm";

CONF_VPN_REFERER_URL="http://"${IP}"/"${KEY}"/userRpm/PPTPCfgRpm.htm";

REMOUTE_ACCESS_REFERER_URL="http://"${IP}"/"${KEY}"/userRpm/ManageControlRpm.htm";

WPS="http://"${IP}"/"${KEY}"/userRpm/WpsCfgRpm.htm?DisWps=DisWps";
WPS_REFERER="http://"${IP}"/"${KEY}"/userRpm/WpsCfgRpm.htm";

WIFI_SSID_REFERER_URL="http://"${IP}"/"${KEY}"/userRpm/WlanNetworkRpm.htm";

CHANGE_WIFI_PASS_REFERER_URL="http://"${IP}"/"${KEY}"/userRpm/WlanSecurityRpm.htm";

DHCP_REFERER_URL="http://"${IP}"/"${KEY}"/userRpm/LanDhcpServerRpm.htm";

LAN_REFERER_URL="http://"${IP}"/"${KEY}"/userRpm/NetworkCfgRpm.htm";


wifi_pass_auto()
{
  for i in $(seq 1 ${MAX_TRIES})
  do

    CHANGE_WIFI_PASS_URL="http://"${IP}"/"${KEY}"/userRpm/WlanSecurityRpm.htm?wepSecOpt=3&wpaSecOpt=2&wpaCipher=2&intervalWpa=0&secType=3&pskSecOpt=3&pskCipher=1&interval=0&Save=Save&pskSecret="${NEW_PASS};


    CHANGE_WIFI_RESPONSE=`curl -s --cookie "Authorization=$COOKIEVAL" --referer ${CHANGE_WIFI_PASS_REFERER_URL} ${CHANGE_WIFI_PASS_URL}`;
    sleep 1;
    WPS_RESPONSE=`curl -s --cookie "Authorization=$COOKIEVAL" --referer ${WPS_REFERER} ${WPS}`;



    MATCHES=`echo ${CHANGE_WIFI_RESPONSE} | grep -c "reboots, please"`
    if [ ${MATCHES} -gt 0 ]; then
    # Success!
    break
  else
    echo "Failed on try $i..."
    sleep 1;
  fi
done


if [ ${MATCHES} -gt 0 ]; then
  clear;


  SUCCESS_TEXT="Successfully edit pass to \e[1m\e[31m${NEW_PASS}\e[0m";
  WPS_TEXT=`echo ${WPS_RESPONSE} | awk {'print $9'} | awk -F"," '{ print $1 }'`
  SSID_TEXT=`echo ${WPS_RESPONSE} | awk {'print $16'} | awk -F"," '{ print $1 }' | sed 's/\"//g'`
  

  if (( ${WPS_TEXT} == 0 )); then
    #statements
    echo "WPS: off"
  else
    echo "WPS: on"
  fi
  echo "SSID: "${SSID_TEXT}
  echo -e ${SUCCESS_TEXT};

  sleep 1;
  menu

else
	echo "Unknown error"

  exit 1;
fi
}

wifi_pass_manual() 
{



  for i in $(seq 1 ${MAX_TRIES})
  do

    while :
    do
      printf 'Enter new passsword on wifi: '
      read -s PASS_MANUAL

      PASS_MANUAL_LENGTH=`echo -n ${PASS_MANUAL} | wc -c`

      if [ ${PASS_MANUAL_LENGTH} -gt 7 ]; then
       echo "PASS OK"
       break;
     else
       echo "Error input password"


     fi
   done

   CHANGE_WIFI_PASS_MANUAL_URL="http://"${IP}"/"${KEY}"/userRpm/WlanSecurityRpm.htm?wepSecOpt=3&wpaSecOpt=2&wpaCipher=2&intervalWpa=0&secType=3&pskSecOpt=3&pskCipher=1&interval=0&Save=Save&pskSecret="${PASS_MANUAL};


  # REBOOT_RESPONSE=`curl -s --cookie "Authorization=$COOKIEVAL" --referer ${REBOOT_REFERER_URL} ${REBOOT_URL}`;
  CHANGE_WIFI_RESPONSE=`curl -s --cookie "Authorization=$COOKIEVAL" --referer ${CHANGE_WIFI_PASS_REFERER_URL} ${CHANGE_WIFI_PASS_MANUAL_URL}`;
  sleep 1;
  WPS_RESPONSE=`curl -s --cookie "Authorization=$COOKIEVAL" --referer ${WPS_REFERER} ${WPS}`;

  MATCHES=`echo ${CHANGE_WIFI_RESPONSE} | grep -c "reboots, please"`
  if [ ${MATCHES} -gt 0 ]; then
    # Success!
    break
  else
    echo "Failed on try $i..."
    sleep 1;
  fi
done

sleep 1;
if [ ${MATCHES} -gt 0 ]; then
  clear;
  SUCCESS_TEXT="Successfully set wifi pass to \e[1m\e[31m${PASS_MANUAL}\e[0m";
  WPS_TEXT=`echo ${WPS_RESPONSE} | awk {'print $9'} | awk -F"," '{ print $1 }'`
  SSID_TEXT=`echo ${WPS_RESPONSE} | awk {'print $16'} | awk -F"," '{ print $1 }' | sed 's/\"//g'`
  
  if (( ${WPS_TEXT} == 0 )); then
    #statements
    echo "WPS: off"
  else
    echo "WPS: on"
  fi

  echo "SSID: "${SSID_TEXT}
  echo -e ${SUCCESS_TEXT};

  sleep 1;
  menu

else
	echo "Unknown error"

  exit 1;
fi


}


reboot_router()
{

	for i in $(seq 1 ${MAX_TRIES})
	do

   sleep 1;


   REBOOT_RESPONSE=`curl -s --cookie "Authorization=$COOKIEVAL" --referer ${REBOOT_REFERER_URL} ${REBOOT_URL}`;
   
   MATCHES=`echo ${REBOOT_RESPONSE} | grep -c "Reboot"`
   if [ ${MATCHES} -gt 0 ]; then
    # Success!
    break
  else
    echo "Failed on try $i..."
    sleep 1;
  fi
done


if [ ${MATCHES} -gt 0 ]; then
  SUCCESS_TEXT="Successfully reboot ${IP}";
  echo -e ${SUCCESS_TEXT};
  exit 1;

else
	echo "Unknown error"

  exit 1;
fi
}


setting_pptp()
{ 
clear;
echo -e "Settings vpn connect \n"

printf 'Enter username vpn: '
read name_vpn

NAME_LENGTH=`echo -n ${name_vpn} | wc -c`

if [ ${NAME_LENGTH} -gt 0 ]; then
  echo
else
 echo "Error input name"
fi  
printf 'Enter password vpn: '
read pass_vpn

PASS_LENGTH=`echo -n ${pass_vpn} | wc -c`

if [ ${PASS_LENGTH} -gt 0 ]; then
  echo
else
 echo "Error input password"
fi


for i in $(seq 1 ${MAX_TRIES})
do



  CONF_VPN_URL="http://"${IP}"/"${KEY}"/userRpm/PPTPCfgRpm.htm?wantype=7&PPTPName="${name_vpn}"&PPTPPwd="${pass_vpn}"&PPTPPwd_cfm="${pass_vpn}"&PPTPServerName="${vpn_server}"&Save=Save";


  CONF_VPN_RESPONSE=`curl -s --cookie "Authorization=$COOKIEVAL" --referer ${CONF_VPN_REFERER_URL} ${CONF_VPN_URL}`;


  MATCHES=`echo ${CONF_VPN_RESPONSE} | grep -c "Access"`
  if [ ${MATCHES} -gt 0 ]; then
    # Success!
    break
  else
    echo "Failed on try $i..."
    sleep 1;
  fi
done


if [ ${MATCHES} -gt 0 ]; then
  clear;
  SUCCESS_TEXT="Successfully settings vpn: \n username: ${name_vpn} \n passsword: ${pass_vpn} \n vpn server: ${vpn_server}";
  echo -e ${SUCCESS_TEXT};

  sleep 1;
  menu

else
  echo "Unknown error"

  exit 1;
fi

}

remoute_access()
{

  for i in $(seq 1 ${MAX_TRIES})
  do

    REMOUTE_ACCESS_URL="http://"${IP}"/"${KEY}"/userRpm/ManageControlRpm.htm?ip="${remoute_server}"&Save=Save";

    REMOUTE_ACCESS_RESPONSE=`curl -s --cookie "Authorization=$COOKIEVAL" --referer ${REMOUTE_ACCESS_REFERER_URL} ${REMOUTE_ACCESS_URL}`;


    MATCHES=`echo ${REMOUTE_ACCESS_RESPONSE} | grep -c "managementPara"`
    if [ ${MATCHES} -gt 0 ]; then
    # Success!
    break
  else
    echo "Failed on try $i..."
    sleep 1;
  fi
done


if [ ${MATCHES} -gt 0 ]; then
  clear;
  SUCCESS_TEXT="Successfully add remoute access to ${remoute_server}";
  echo -e ${SUCCESS_TEXT};
  sleep 1;
  menu


else
  echo "Unknown error"

  exit 1;
fi


}

wifi_ssid()
{
  clear;
  echo -e "Settings SSID \n"

  while : 
  do
    printf 'Enter your ssid: '
    read ssid

    SSID_LENGTH=`echo -n ${ssid} | wc -c`



    if [ ${SSID_LENGTH} -gt 0 ]; then
      break;
    else
     echo "Error input ssid"
   fi  
 done


 for i in $(seq 1 ${MAX_TRIES})
 do

  WIFI_SSID_URL="http://"${IP}"/"${KEY}"/userRpm/WlanNetworkRpm.htm?ssid1="${ssid}"&ap=1&broadcast=2&Save=Save";

  WIFI_SSID_RESPONSE=`curl -s --cookie "Authorization=$COOKIEVAL" --referer ${WIFI_SSID_REFERER_URL} ${WIFI_SSID_URL}`;


  MATCHES=`echo ${WIFI_SSID_RESPONSE} | grep -c "wlanPara"`
  if [ ${MATCHES} -gt 0 ]; then
    # Success!
    break
  else
    echo "Failed on try $i..."
    sleep 1;
  fi
done


if [ ${MATCHES} -gt 0 ]; then
  clear;
  SUCCESS_TEXT="Successfully edit ssid to: ${ssid}";
  echo -e ${SUCCESS_TEXT};
  sleep 1;
  menu

else
  echo "Unknown error"

  exit 1;
fi
}

setting_dhcp()
{
  clear;
  echo -e "Settings dhcp \n"

  while : 
  do
    printf 'Enter status dhcp (1 - on / 0 - off): '
    read status_dhcp

    STATUS_LENGTH=`echo -n ${status_dhcp} | wc -c`


    if [ ${STATUS_LENGTH} -gt 0 ]; then
      break;
    else
     echo "Error input status"
   fi  
 done

 for i in $(seq 1 ${MAX_TRIES})
 do

  DHCP_URL="http://"${IP}"/"${KEY}"/userRpm/LanDhcpServerRpm.htm?dhcpserver="${status_dhcp}"&ip1="${dhcp_start_ip}"&ip2="${dhcp_end_ip}"&Lease=120&gateway="${lan_gateway}"&Save=Save";

  DHCP_RESPONSE=`curl -s --cookie "Authorization=$COOKIEVAL" --referer ${DHCP_REFERER_URL} ${DHCP_URL}`;


  MATCHES=`echo ${DHCP_RESPONSE} | grep -c "DHCPPara"`
  if [ ${MATCHES} -gt 0 ]; then
    # Success!
    break
  else
    echo "Failed on try $i..."
    sleep 1;
  fi
done


if [ ${MATCHES} -gt 0 ]; then
  clear;
  if (( ${status_dhcp} == 1 )); then
    #statements
    echo -e "dhcp: on";
  else
    echo -e "dhcp: off";
  fi

  echo -e "The change of DHCP config will not take effect until this device reboots, please\n"
  sleep 1;
  menu


else
  echo "Unknown error"

  exit 1;
fi


}

setting_lan()
{

 clear;
 echo -e "Settings lan \n"

 while : 
 do
  printf 'Do you want use default lan ip - '${lan_gateway}' ? (y/n): '
  read status_lan

  STATUS_LENGTH=`echo -n ${status_lan} | wc -c`
  STATUS_LAN_TEXT=`echo ${status_lan}`

  if [ ${STATUS_LENGTH} -gt 0 ]; then
    if [[ "${STATUS_LAN_TEXT}" = "y" ]]; then
      LAN_URL="http://"${IP}"/"${KEY}"/userRpm/NetworkCfgRpm.htm?lanip="${lan_gateway}"&lanmask=2&Save=Save";
      #statements
      break;
    else

     printf 'Enter new lan ip: '
     read lan_ip

     LAN_URL="http://"${IP}"/"${KEY}"/userRpm/NetworkCfgRpm.htm?lanip="${lan_ip}"&lanmask=2&Save=Save";

   fi

   break;
 else
   echo "Error input status"
 fi  
done

for i in $(seq 1 ${MAX_TRIES})
do


  LAN_RESPONSE=`curl -s --cookie "Authorization=$COOKIEVAL" --referer ${LAN_REFERER_URL} ${LAN_URL}`;



  MATCHES=`echo ${LAN_RESPONSE} | grep -c "lanPara"` 
  if [ ${MATCHES} -gt 0 ]; then
    # Success!
    break
  else
    echo
    # echo "Failed on try $i..."
    sleep 1;
  fi
done


if [ ${MATCHES} -gt 0 ]; then
  echo -e "New lan ip: \e[1m\e[31m"`echo ${LAN_RESPONSE} | awk {'print $10'} | awk -F"," '{ print $1 }' | sed 's/\"//g'`"\e[0m"

  echo -e "Reboot router...\n"
  sleep 1;
  reboot_router


else
  echo "Unknown error"

  exit 1;
fi


}

info_router()
{

INFO_VERSION_REFERER_URL="http://"${IP}"/"${KEY}"/userRpm/StatusRpm.htm";
INFO_VERSION_RESPONSE=`curl -s --cookie "Authorization=$COOKIEVAL" --referer ${INFO_VERSION_REFERER_URL} ${INFO_VERSION_REFERER_URL}`;

INFO_WIFI_RESPONSE=`curl -s --cookie "Authorization=$COOKIEVAL" --referer ${WIFI_SSID_REFERER_URL} ${WIFI_SSID_REFERER_URL}`;
INFO_WIFI1_RESPONSE=`curl -s --cookie "Authorization=$COOKIEVAL" --referer ${CHANGE_WIFI_PASS_REFERER_URL} ${CHANGE_WIFI_PASS_REFERER_URL}`;

INFO_REMOUTE_RESPONSE=`curl -s --cookie "Authorization=$COOKIEVAL" --referer ${REMOUTE_ACCESS_REFERER_URL} ${REMOUTE_ACCESS_REFERER_URL}`;

INFO_WPS_RESPONSE=`curl -s --cookie "Authorization=$COOKIEVAL" --referer ${WPS_REFERER} ${WPS_REFERER}`;
INFO_WPS=`echo ${INFO_WPS_RESPONSE} | awk {'print $9'} | awk -F"," '{ print $1 }'`

INFO_WAN_RESPONSE=`curl -s --cookie "Authorization=$COOKIEVAL" --referer ${CONF_VPN_REFERER_URL} ${CONF_VPN_REFERER_URL}`;

WAN_TYPE=`echo ${INFO_VERSION_RESPONSE} | awk -F "wanPara" {'print $2'} | awk -F "," {'print $4'}`

echo -e "\nVesion info:"
echo -e "Version:" `echo ${INFO_VERSION_RESPONSE} | awk {'print $19 , $20'} | sed 's/\"//g'`
echo -e "Mac:" `echo "${INFO_VERSION_RESPONSE}"  | grep "wanPara" -A 1 | awk -F "," {'print $2'} | grep '[a-zA-Z0-9]' | sed 's/\"//g'  | sed 's/^[ \t]*//'`
echo "- - - - -"
echo -e "\nWifi info"
echo "- - - - -"
echo -e "SSID: "`echo "${INFO_WIFI_RESPONSE}" | head -n 3 | awk {'print $1'} | awk -F "," {'print $4'} | sed 's/\"//g' | tail -n 1`
echo -e "WIFI PASS: "`echo ${INFO_WIFI1_RESPONSE} | head -n 2 | awk {'print $18'} | awk -F "," {'print $1'} | sed 's/\"//g'`
if (( ${INFO_WPS} == 0 )); then
    #statements
    echo "WPS STATUS: off"
  else
    echo "WPS STATUS: on"
fi
echo "- - - - -"
echo -e "\nRemoute access: "`echo ${INFO_REMOUTE_RESPONSE} | awk {'print $10'} | awk -F "," {'print $1'} | sed 's/\"//g'`
echo "- - - - -"

if (( ${WAN_TYPE} == 8 )); then

echo -e "\nVPN info"
echo "- - - - -"
echo -e "username: "`echo ${INFO_WAN_RESPONSE} | awk -F "," {'print $6'} | sed 's/\"//g'`
echo -e "passsword: "`echo ${INFO_WAN_RESPONSE} | awk -F "," {'print $7'} | sed 's/\"//g'`
echo -e "vpn_server: "`echo ${INFO_WAN_RESPONSE} | awk -F "," {'print $5'} | sed 's/\"//g'`
echo -e "\r"
echo -e "dhpc IP: "`echo ${INFO_WAN_RESPONSE} | awk -F "," {'print $10'} | sed 's/\"//g'`
echo -e "dhpc Mask: "`echo ${INFO_WAN_RESPONSE} | awk -F "," {'print $11'} | sed 's/\"//g'`
echo -e "dhpc Gateway: "`echo ${INFO_WAN_RESPONSE} | awk -F "," {'print $12'} | sed 's/\"//g'`
echo -e "\r"
echo -e "Intenet IP: "`echo ${INFO_WAN_RESPONSE} | awk -F "," {'print $18'} | sed 's/\"//g'`
echo -e "DNS1: "`echo ${INFO_WAN_RESPONSE} | awk -F "," {'print $22'} | sed 's/\"//g'`
echo -e "DNS2: "`echo ${INFO_WAN_RESPONSE} | awk -F "," {'print $23'} | sed 's/\"//g'`
  
fi
}



menu()
{
  echo -e "\nChange config mode: 
  1 - for generate new wifi passsword
  2 - enter new passsword wifi
  3 - setting vpn connect
  4 - add remoute access
  5 - enter new ssid wifi
  6 - set status dhcp
  7 - lan setting
  i - info router
  0 - reboot router
  q - exit \n"


  printf 'What do you want to do? '

  while :
  do

    read WANT

    case "${WANT}" in
      1)
wifi_pass_auto
;;

2)
wifi_pass_manual
;;

3)
setting_pptp
;;

4)
remoute_access
;;

5)
wifi_ssid
;;

6)
setting_dhcp
;;

7)
setting_lan
;;

0)
reboot_router
;;

i)
info_router
;;

q)
exit;
;;

*) 
echo "Error code"

sleep 1;
clear;
menu
;;
esac 

done


}

menu
